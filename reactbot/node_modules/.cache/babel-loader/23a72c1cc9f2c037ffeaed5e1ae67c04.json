{"ast":null,"code":"let rerenderTree = () => {\n  console.log(\"state update\");\n};\n\nlet store = {\n  state: {\n    contain: {\n      advertising: {\n        news: [{\n          header: \"bad news for gay\",\n          text: \"your ass in shit\"\n        }, {\n          header: \"bad news for gay\",\n          text: \"your ass in shit\"\n        }, {\n          header: \"bad news for gay\",\n          text: \"your ass in shit\"\n        }],\n        newsChangeHead: \"Введите название новости\",\n        newsChangeText: \"Введите текст новости\"\n      }\n    }\n  },\n\n  rerenderTree() {\n    console.log(\"state update\");\n  },\n\n  addNews() {\n    let newNews = {\n      header: state.contain.advertising.newsChangeHead,\n      text: state.contain.advertising.newsChangeText\n    };\n    state.contain.advertising.news.unshift(newNews);\n    updateNews(\"\", \"\");\n    rerenderTree(state);\n  },\n\n  updateNews(newHeaderNews, newTextNews) {\n    state.contain.advertising.newsChangeHead = newHeaderNews;\n    state.contain.advertising.newsChangeText = newTextNews;\n    rerenderTree(state);\n  },\n\n  subscribe(observer) {\n    rerenderTree = observer;\n  }\n\n};\nexport default state;","map":{"version":3,"sources":["D:/ХИМБОТ/reactbot/src/state.js"],"names":["rerenderTree","console","log","store","state","contain","advertising","news","header","text","newsChangeHead","newsChangeText","addNews","newNews","unshift","updateNews","newHeaderNews","newTextNews","subscribe","observer"],"mappings":"AAAA,IAAIA,YAAY,GAAG,MAAM;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,CAFD;;AAIA,IAAIC,KAAK,GAAG;AACVC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE,CACJ;AACEC,UAAAA,MAAM,EAAE,kBADV;AAEEC,UAAAA,IAAI,EAAE;AAFR,SADI,EAKJ;AACED,UAAAA,MAAM,EAAE,kBADV;AAEEC,UAAAA,IAAI,EAAE;AAFR,SALI,EASJ;AACED,UAAAA,MAAM,EAAE,kBADV;AAEEC,UAAAA,IAAI,EAAE;AAFR,SATI,CADK;AAeXC,QAAAA,cAAc,EAAE,0BAfL;AAgBXC,QAAAA,cAAc,EAAE;AAhBL;AADN;AADJ,GADG;;AAuBVX,EAAAA,YAAY,GAAG;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,GAzBS;;AA0BVU,EAAAA,OAAO,GAAG;AACR,QAAIC,OAAO,GAAG;AACZL,MAAAA,MAAM,EAAEJ,KAAK,CAACC,OAAN,CAAcC,WAAd,CAA0BI,cADtB;AAEZD,MAAAA,IAAI,EAAEL,KAAK,CAACC,OAAN,CAAcC,WAAd,CAA0BK;AAFpB,KAAd;AAIAP,IAAAA,KAAK,CAACC,OAAN,CAAcC,WAAd,CAA0BC,IAA1B,CAA+BO,OAA/B,CAAuCD,OAAvC;AACAE,IAAAA,UAAU,CAAC,EAAD,EAAK,EAAL,CAAV;AACAf,IAAAA,YAAY,CAACI,KAAD,CAAZ;AACD,GAlCS;;AAmCVW,EAAAA,UAAU,CAACC,aAAD,EAAgBC,WAAhB,EAA6B;AACrCb,IAAAA,KAAK,CAACC,OAAN,CAAcC,WAAd,CAA0BI,cAA1B,GAA2CM,aAA3C;AACAZ,IAAAA,KAAK,CAACC,OAAN,CAAcC,WAAd,CAA0BK,cAA1B,GAA2CM,WAA3C;AACAjB,IAAAA,YAAY,CAACI,KAAD,CAAZ;AACD,GAvCS;;AAwCVc,EAAAA,SAAS,CAACC,QAAD,EAAW;AAClBnB,IAAAA,YAAY,GAAGmB,QAAf;AACD;;AA1CS,CAAZ;AA6CA,eAAef,KAAf","sourcesContent":["let rerenderTree = () => {\r\n  console.log(\"state update\");\r\n};\r\n\r\nlet store = {\r\n  state: {\r\n    contain: {\r\n      advertising: {\r\n        news: [\r\n          {\r\n            header: \"bad news for gay\",\r\n            text: \"your ass in shit\",\r\n          },\r\n          {\r\n            header: \"bad news for gay\",\r\n            text: \"your ass in shit\",\r\n          },\r\n          {\r\n            header: \"bad news for gay\",\r\n            text: \"your ass in shit\",\r\n          },\r\n        ],\r\n        newsChangeHead: \"Введите название новости\",\r\n        newsChangeText: \"Введите текст новости\",\r\n      },\r\n    },\r\n  },\r\n  rerenderTree() {\r\n    console.log(\"state update\");\r\n  },\r\n  addNews() {\r\n    let newNews = {\r\n      header: state.contain.advertising.newsChangeHead,\r\n      text: state.contain.advertising.newsChangeText,\r\n    };\r\n    state.contain.advertising.news.unshift(newNews);\r\n    updateNews(\"\", \"\");\r\n    rerenderTree(state);\r\n  },\r\n  updateNews(newHeaderNews, newTextNews) {\r\n    state.contain.advertising.newsChangeHead = newHeaderNews;\r\n    state.contain.advertising.newsChangeText = newTextNews;\r\n    rerenderTree(state);\r\n  },\r\n  subscribe(observer) {\r\n    rerenderTree = observer;\r\n  },\r\n};\r\n\r\nexport default state;\r\n"]},"metadata":{},"sourceType":"module"}