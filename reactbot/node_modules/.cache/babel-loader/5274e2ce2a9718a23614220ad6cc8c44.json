{"ast":null,"code":"let store = {\n  _state: {\n    contain: {\n      advertising: {\n        news: [{\n          header: \"bad news for gay\",\n          text: \"your ass in shit\"\n        }, {\n          header: \"bad news for gay\",\n          text: \"your ass in shit\"\n        }, {\n          header: \"bad news for gay\",\n          text: \"your ass in shit\"\n        }],\n        newsChangeHead: \"Введите название новости\",\n        newsChangeText: \"Введите текст новости\"\n      }\n    }\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  subscribe(observer) {\n    this._rerenderTree = observer;\n  },\n\n  _rerenderTree() {\n    console.log(\"state update\");\n  },\n\n  addNews() {\n    let newNews = {\n      header: this._state.contain.advertising.newsChangeHead,\n      text: this._state.contain.advertising.newsChangeText\n    };\n\n    this._state.contain.advertising.news.unshift(newNews);\n\n    store.updateNews(\"\", \"\");\n\n    this._rerenderTree(this._state);\n  },\n\n  updateNews(newHeaderNews, newTextNews) {\n    this._state.contain.advertising.newsChangeHead = newHeaderNews;\n    this._state.contain.advertising.newsChangeText = newTextNews;\n\n    this._rerenderTree(this._state);\n  },\n\n  addNewsCreator() {\n    return {\n      type: \"ADD-NEWS\"\n    };\n  },\n\n  updateNewsChange(newsHeader, newsText) {\n    return {\n      type: \"UPDATE-NEWS\",\n      newsHeader: newsHeader,\n      newsText: newsText\n    };\n  },\n\n  dispatch(action) {\n    switch (action.type) {\n      case \"ADD-NEWS\":\n        {\n          let newNews = {\n            header: this._state.contain.advertising.newsChangeHead,\n            text: this._state.contain.advertising.newsChangeText\n          };\n\n          this._state.contain.advertising.news.unshift(newNews);\n\n          store.updateNews(\"\", \"\");\n\n          this._rerenderTree(this._state);\n        }\n        break;\n\n      case \"UPDATE-NEWS\":\n        {\n          this._state.contain.advertising.newsChangeHead = action.newHeaderNews;\n          this._state.contain.advertising.newsChangeText = action.newTextNews;\n\n          this._rerenderTree(this._state);\n        }\n        break;\n\n      default:\n        break;\n    }\n  }\n\n};\nwindow.store = store;\nexport default store;","map":{"version":3,"sources":["D:/ХИМБОТ/reactbot/src/state.js"],"names":["store","_state","contain","advertising","news","header","text","newsChangeHead","newsChangeText","getState","subscribe","observer","_rerenderTree","console","log","addNews","newNews","unshift","updateNews","newHeaderNews","newTextNews","addNewsCreator","type","updateNewsChange","newsHeader","newsText","dispatch","action","window"],"mappings":"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","sourcesContent":["let store = {\r\n  _state: {\r\n    contain: {\r\n      advertising: {\r\n        news: [\r\n          {\r\n            header: \"bad news for gay\",\r\n            text: \"your ass in shit\",\r\n          },\r\n          {\r\n            header: \"bad news for gay\",\r\n            text: \"your ass in shit\",\r\n          },\r\n          {\r\n            header: \"bad news for gay\",\r\n            text: \"your ass in shit\",\r\n          },\r\n        ],\r\n        newsChangeHead: \"Введите название новости\",\r\n        newsChangeText: \"Введите текст новости\",\r\n      },\r\n    },\r\n  },\r\n  getState() {\r\n    return this._state;\r\n  },\r\n  subscribe(observer) {\r\n    this._rerenderTree = observer;\r\n  },\r\n  _rerenderTree() {\r\n    console.log(\"state update\");\r\n  },\r\n  addNews() {\r\n    let newNews = {\r\n      header: this._state.contain.advertising.newsChangeHead,\r\n      text: this._state.contain.advertising.newsChangeText,\r\n    };\r\n    this._state.contain.advertising.news.unshift(newNews);\r\n    store.updateNews(\"\", \"\");\r\n    this._rerenderTree(this._state);\r\n  },\r\n  updateNews(newHeaderNews, newTextNews) {\r\n    this._state.contain.advertising.newsChangeHead = newHeaderNews;\r\n    this._state.contain.advertising.newsChangeText = newTextNews;\r\n    this._rerenderTree(this._state);\r\n  },\r\n  addNewsCreator() {\r\n    return {\r\n      type: \"ADD-NEWS\",\r\n    };\r\n  },\r\n\r\n  updateNewsChange(newsHeader, newsText) {\r\n    return {\r\n      type: \"UPDATE-NEWS\",\r\n      newsHeader: newsHeader,\r\n      newsText: newsText,\r\n    };\r\n  },\r\n  dispatch(action) {\r\n    switch (action.type) {\r\n      case \"ADD-NEWS\":\r\n        {\r\n          let newNews = {\r\n            header: this._state.contain.advertising.newsChangeHead,\r\n            text: this._state.contain.advertising.newsChangeText,\r\n          };\r\n          this._state.contain.advertising.news.unshift(newNews);\r\n          store.updateNews(\"\", \"\");\r\n          this._rerenderTree(this._state);\r\n        }\r\n        break;\r\n      case \"UPDATE-NEWS\":\r\n        {\r\n          this._state.contain.advertising.newsChangeHead = action.newHeaderNews;\r\n          this._state.contain.advertising.newsChangeText = action.newTextNews;\r\n          this._rerenderTree(this._state);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n};\r\n\r\nwindow.store = store;\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}