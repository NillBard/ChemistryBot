{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nexport const useHttp = () => {\n  _s();\n\n  const {\n    loading,\n    setLoading\n  } = useState(false);\n  const {\n    error,\n    setError\n  } = useState(false);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Something wrong');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n\n  const clear = () => setError(null);\n\n  return {\n    loading,\n    request,\n    error\n  };\n};\n\n_s(useHttp, \"ZRLsxJzrC8APeSSLdRNcBurrtDs=\");","map":{"version":3,"sources":["D:/ХИМБОТ/reactbot/src/hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","response","fetch","data","json","ok","Error","message","e","clear"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAI;AAAA;;AACvB,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAACK,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAoBN,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAMO,OAAO,GAAGN,WAAW,CAAE,OAAMO,GAAN,EAAWC,MAAM,GAAE,KAAnB,EAA0BC,IAAI,GAAG,IAAjC,EAAuCC,OAAO,GAAE,EAAhD,KAAsD;AAC/EP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,YAAMQ,QAAQ,GAAI,MAAMC,KAAK,CAACL,GAAD,EAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAN,CAA7B;AACAG,MAAAA,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAb;;AAEA,UAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AACZ,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,iBAA1B,CAAN;AACH;;AAEDd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOU,IAAP;AACH,KAVD,CAUE,OAAOK,CAAP,EAAU;AACRf,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACa,CAAC,CAACD,OAAH,CAAR;AACA,YAAMC,CAAN;AACH;AACJ,GAjB0B,EAiBxB,EAjBwB,CAA3B;;AAmBA,QAAMC,KAAK,GAAG,MAAKd,QAAQ,CAAC,IAAD,CAA3B;;AAEA,SAAO;AAACH,IAAAA,OAAD;AAAUI,IAAAA,OAAV;AAAmBF,IAAAA;AAAnB,GAAP;AACH,CAzBM;;GAAMH,O","sourcesContent":["import { useState, useCallback } from \"react\"\r\n\r\nexport const useHttp = ()=>{\r\n    const {loading, setLoading} = useState(false)\r\n    const {error, setError} = useState(false)\r\n    const request = useCallback( async(url, method ='GET', body = null, headers ={}) =>{\r\n        setLoading(true);\r\n        try {\r\n            const response =  await fetch(url, {method, body, headers})\r\n            data = await response.json()\r\n\r\n            if(!response.ok){\r\n                throw new Error(data.message || 'Something wrong')\r\n            }\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clear = ()=> setError(null);\r\n    \r\n    return {loading, request, error}\r\n}"]},"metadata":{},"sourceType":"module"}