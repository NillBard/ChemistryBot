{"ast":null,"code":"// import { useState, useCallback } from \"react\"\n// export const useHttp = ()=>{\n//     const {loading, setLoading} = useState(false)\n//     const {error, setError} = useState(false)\n//     const request = useCallback( async(url, method ='GET', body = null, headers ={}) =>{\n//         setLoading(true);\n//         try {\n//             const response =  await fetch(url, {method, body, headers})\n//             data = await response.json()\n//             if(!response.ok){\n//                 throw new Error(data.message || 'Something wrong')\n//             }\n//             setLoading(false);\n//             return data;\n//         } catch (e) {\n//             setLoading(false)\n//             setError(e.message)\n//             throw e\n//         }\n//     }, [])\n//     const clear = ()=> setError(null);\n//     return {loading, request, error}\n// }","map":{"version":3,"sources":["D:/ХИМБОТ/reactbot/src/hooks/http.hook.js"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA","sourcesContent":["// import { useState, useCallback } from \"react\"\r\n\r\n// export const useHttp = ()=>{\r\n//     const {loading, setLoading} = useState(false)\r\n//     const {error, setError} = useState(false)\r\n//     const request = useCallback( async(url, method ='GET', body = null, headers ={}) =>{\r\n//         setLoading(true);\r\n//         try {\r\n//             const response =  await fetch(url, {method, body, headers})\r\n//             data = await response.json()\r\n\r\n//             if(!response.ok){\r\n//                 throw new Error(data.message || 'Something wrong')\r\n//             }\r\n\r\n//             setLoading(false);\r\n//             return data;\r\n//         } catch (e) {\r\n//             setLoading(false)\r\n//             setError(e.message)\r\n//             throw e\r\n//         }\r\n//     }, [])\r\n\r\n//     const clear = ()=> setError(null);\r\n\r\n//     return {loading, request, error}\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}